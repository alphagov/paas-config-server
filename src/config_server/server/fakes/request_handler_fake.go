// This file was generated by counterfeiter
package fakes

import (
	"config_server/server"
	"net/http"
	"sync"
)

type FakeRequestHandler struct {
	HandleRequestStub        func(http.ResponseWriter, *http.Request)
	handleRequestMutex       sync.RWMutex
	handleRequestArgsForCall []struct {
		arg1 http.ResponseWriter
		arg2 *http.Request
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeRequestHandler) HandleRequest(arg1 http.ResponseWriter, arg2 *http.Request) {
	fake.handleRequestMutex.Lock()
	fake.handleRequestArgsForCall = append(fake.handleRequestArgsForCall, struct {
		arg1 http.ResponseWriter
		arg2 *http.Request
	}{arg1, arg2})
	fake.recordInvocation("HandleRequest", []interface{}{arg1, arg2})
	fake.handleRequestMutex.Unlock()
	if fake.HandleRequestStub != nil {
		fake.HandleRequestStub(arg1, arg2)
	}
}

func (fake *FakeRequestHandler) HandleRequestCallCount() int {
	fake.handleRequestMutex.RLock()
	defer fake.handleRequestMutex.RUnlock()
	return len(fake.handleRequestArgsForCall)
}

func (fake *FakeRequestHandler) HandleRequestArgsForCall(i int) (http.ResponseWriter, *http.Request) {
	fake.handleRequestMutex.RLock()
	defer fake.handleRequestMutex.RUnlock()
	return fake.handleRequestArgsForCall[i].arg1, fake.handleRequestArgsForCall[i].arg2
}

func (fake *FakeRequestHandler) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.handleRequestMutex.RLock()
	defer fake.handleRequestMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeRequestHandler) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ server.RequestHandler = new(FakeRequestHandler)
